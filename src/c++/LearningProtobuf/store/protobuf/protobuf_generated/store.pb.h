// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_store_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_store_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_store_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_store_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_store_2eproto;
class customer;
class customerDefaultTypeInternal;
extern customerDefaultTypeInternal _customer_default_instance_;
class goods;
class goodsDefaultTypeInternal;
extern goodsDefaultTypeInternal _goods_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::customer* Arena::CreateMaybeMessage<::customer>(Arena*);
template<> ::goods* Arena::CreateMaybeMessage<::goods>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GoodsCategory : int {
  SAND = 0,
  STONE = 1,
  CEMENT = 2,
  MAX_CATEGORY_NUMBER = 3,
  GoodsCategory_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GoodsCategory_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GoodsCategory_IsValid(int value);
constexpr GoodsCategory GoodsCategory_MIN = SAND;
constexpr GoodsCategory GoodsCategory_MAX = MAX_CATEGORY_NUMBER;
constexpr int GoodsCategory_ARRAYSIZE = GoodsCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GoodsCategory_descriptor();
template<typename T>
inline const std::string& GoodsCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GoodsCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GoodsCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GoodsCategory_descriptor(), enum_t_value);
}
inline bool GoodsCategory_Parse(
    const std::string& name, GoodsCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GoodsCategory>(
    GoodsCategory_descriptor(), name, value);
}
enum Options : int {
  CHANGE_GOODS_PRICE = 0,
  SHOW_BUYER_INFO = 1,
  NEW_ORDER = 2,
  ADD_CATEGORY = 3,
  EXIT_PROGRAM = 4,
  Options_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Options_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Options_IsValid(int value);
constexpr Options Options_MIN = CHANGE_GOODS_PRICE;
constexpr Options Options_MAX = EXIT_PROGRAM;
constexpr int Options_ARRAYSIZE = Options_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Options_descriptor();
template<typename T>
inline const std::string& Options_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Options>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Options_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Options_descriptor(), enum_t_value);
}
inline bool Options_Parse(
    const std::string& name, Options* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Options>(
    Options_descriptor(), name, value);
}
// ===================================================================

class customer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:customer) */ {
 public:
  customer();
  virtual ~customer();

  customer(const customer& from);
  customer(customer&& from) noexcept
    : customer() {
    *this = ::std::move(from);
  }

  inline customer& operator=(const customer& from) {
    CopyFrom(from);
    return *this;
  }
  inline customer& operator=(customer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const customer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const customer* internal_default_instance() {
    return reinterpret_cast<const customer*>(
               &_customer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(customer* other);
  friend void swap(customer& a, customer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline customer* New() const final {
    return CreateMaybeMessage<customer>(nullptr);
  }

  customer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<customer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const customer& from);
  void MergeFrom(const customer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(customer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "customer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2eproto);
    return ::descriptor_table_store_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // string category_name = 9;
  void clear_category_name();
  static const int kCategoryNameFieldNumber = 9;
  const std::string& category_name() const;
  void set_category_name(const std::string& value);
  void set_category_name(std::string&& value);
  void set_category_name(const char* value);
  void set_category_name(const char* value, size_t size);
  std::string* mutable_category_name();
  std::string* release_category_name();
  void set_allocated_category_name(std::string* category_name);

  // uint64 phone_number = 3;
  void clear_phone_number();
  static const int kPhoneNumberFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 phone_number() const;
  void set_phone_number(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .GoodsCategory category = 5;
  void clear_category();
  static const int kCategoryFieldNumber = 5;
  ::GoodsCategory category() const;
  void set_category(::GoodsCategory value);

  // uint32 amount = 6;
  void clear_amount();
  static const int kAmountFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 price = 7;
  void clear_price();
  static const int kPriceFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 total_payment = 8;
  void clear_total_payment();
  static const int kTotalPaymentFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_payment() const;
  void set_total_payment(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:customer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 phone_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int category_;
  ::PROTOBUF_NAMESPACE_ID::uint32 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_payment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_store_2eproto;
};
// -------------------------------------------------------------------

class goods :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:goods) */ {
 public:
  goods();
  virtual ~goods();

  goods(const goods& from);
  goods(goods&& from) noexcept
    : goods() {
    *this = ::std::move(from);
  }

  inline goods& operator=(const goods& from) {
    CopyFrom(from);
    return *this;
  }
  inline goods& operator=(goods&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const goods& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const goods* internal_default_instance() {
    return reinterpret_cast<const goods*>(
               &_goods_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(goods* other);
  friend void swap(goods& a, goods& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline goods* New() const final {
    return CreateMaybeMessage<goods>(nullptr);
  }

  goods* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<goods>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const goods& from);
  void MergeFrom(const goods& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(goods* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "goods";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_store_2eproto);
    return ::descriptor_table_store_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 price = 3;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 price() const;
  void set_price(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:goods)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 price_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_store_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// customer

// string name = 1;
inline void customer::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& customer::name() const {
  // @@protoc_insertion_point(field_get:customer.name)
  return name_.GetNoArena();
}
inline void customer::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:customer.name)
}
inline void customer::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:customer.name)
}
inline void customer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:customer.name)
}
inline void customer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:customer.name)
}
inline std::string* customer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:customer.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* customer::release_name() {
  // @@protoc_insertion_point(field_release:customer.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void customer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:customer.name)
}

// uint32 id = 2;
inline void customer::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 customer::id() const {
  // @@protoc_insertion_point(field_get:customer.id)
  return id_;
}
inline void customer::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:customer.id)
}

// uint64 phone_number = 3;
inline void customer::clear_phone_number() {
  phone_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 customer::phone_number() const {
  // @@protoc_insertion_point(field_get:customer.phone_number)
  return phone_number_;
}
inline void customer::set_phone_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  phone_number_ = value;
  // @@protoc_insertion_point(field_set:customer.phone_number)
}

// string address = 4;
inline void customer::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& customer::address() const {
  // @@protoc_insertion_point(field_get:customer.address)
  return address_.GetNoArena();
}
inline void customer::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:customer.address)
}
inline void customer::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:customer.address)
}
inline void customer::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:customer.address)
}
inline void customer::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:customer.address)
}
inline std::string* customer::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:customer.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* customer::release_address() {
  // @@protoc_insertion_point(field_release:customer.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void customer::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:customer.address)
}

// .GoodsCategory category = 5;
inline void customer::clear_category() {
  category_ = 0;
}
inline ::GoodsCategory customer::category() const {
  // @@protoc_insertion_point(field_get:customer.category)
  return static_cast< ::GoodsCategory >(category_);
}
inline void customer::set_category(::GoodsCategory value) {
  
  category_ = value;
  // @@protoc_insertion_point(field_set:customer.category)
}

// uint32 amount = 6;
inline void customer::clear_amount() {
  amount_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 customer::amount() const {
  // @@protoc_insertion_point(field_get:customer.amount)
  return amount_;
}
inline void customer::set_amount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:customer.amount)
}

// uint32 price = 7;
inline void customer::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 customer::price() const {
  // @@protoc_insertion_point(field_get:customer.price)
  return price_;
}
inline void customer::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:customer.price)
}

// uint32 total_payment = 8;
inline void customer::clear_total_payment() {
  total_payment_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 customer::total_payment() const {
  // @@protoc_insertion_point(field_get:customer.total_payment)
  return total_payment_;
}
inline void customer::set_total_payment(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_payment_ = value;
  // @@protoc_insertion_point(field_set:customer.total_payment)
}

// string category_name = 9;
inline void customer::clear_category_name() {
  category_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& customer::category_name() const {
  // @@protoc_insertion_point(field_get:customer.category_name)
  return category_name_.GetNoArena();
}
inline void customer::set_category_name(const std::string& value) {
  
  category_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:customer.category_name)
}
inline void customer::set_category_name(std::string&& value) {
  
  category_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:customer.category_name)
}
inline void customer::set_category_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:customer.category_name)
}
inline void customer::set_category_name(const char* value, size_t size) {
  
  category_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:customer.category_name)
}
inline std::string* customer::mutable_category_name() {
  
  // @@protoc_insertion_point(field_mutable:customer.category_name)
  return category_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* customer::release_category_name() {
  // @@protoc_insertion_point(field_release:customer.category_name)
  
  return category_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void customer::set_allocated_category_name(std::string* category_name) {
  if (category_name != nullptr) {
    
  } else {
    
  }
  category_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category_name);
  // @@protoc_insertion_point(field_set_allocated:customer.category_name)
}

// -------------------------------------------------------------------

// goods

// uint32 id = 1;
inline void goods::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 goods::id() const {
  // @@protoc_insertion_point(field_get:goods.id)
  return id_;
}
inline void goods::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:goods.id)
}

// string name = 2;
inline void goods::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& goods::name() const {
  // @@protoc_insertion_point(field_get:goods.name)
  return name_.GetNoArena();
}
inline void goods::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:goods.name)
}
inline void goods::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:goods.name)
}
inline void goods::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:goods.name)
}
inline void goods::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:goods.name)
}
inline std::string* goods::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:goods.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* goods::release_name() {
  // @@protoc_insertion_point(field_release:goods.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void goods::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:goods.name)
}

// uint32 price = 3;
inline void goods::clear_price() {
  price_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 goods::price() const {
  // @@protoc_insertion_point(field_get:goods.price)
  return price_;
}
inline void goods::set_price(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:goods.price)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GoodsCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GoodsCategory>() {
  return ::GoodsCategory_descriptor();
}
template <> struct is_proto_enum< ::Options> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Options>() {
  return ::Options_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_store_2eproto
